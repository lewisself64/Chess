package pieces;

import java.util.ArrayList;

/**
 * Creates all the attributes and movements for all the chess pieces.
 * 
 * @author Lewis Self
 * @version 1.0.0
 */
public abstract class Piece 
{
	private String name;
	private String color;
	private String image;
	
	private int value;
	private int x;
	private int y;
	
	// Set the piece activity to false on creation and the first move to true
	private boolean active    = false;
	private boolean firstMove = true;
	
	/**
	 * Creates the piece object.
	 * 
	 * @param pName		The name of the Piece
	 * @param pColor	The colour of the Piece (can only be white or black)
	 * @param pValue	The value of the Piece. Queen = 9, Rook = 5, Knights & Bishop = 3 and pawns = 1
	 * @param pY		The y coordinate of the Pieces current location
	 * @param pX		The x coordinate of the Pieces current location
	 * @param pImage	The image of the piece which will be displayed as an icon on the square
	 */
	Piece(String pName, String pColor, int pValue, int pY, int pX, String pImage)
	{
		this.name  = pName;
		this.color = pColor;
		this.value = pValue;
		this.x     = pX;
		this.y     = pY;
		this.image = pImage;
	}

	/**
	 * Creates a single square path for the piece.
	 * 
	 * @param y	The y coordinate for the single move square
	 * @param x	The x coordinate for the single move square
	 * 
	 * @return	Returns the path of squares the piece can move too
	 */
	public ArrayList<ArrayList<Integer>> singlePath(int y, int x)
	{
		// Create the path for the piece
		ArrayList<ArrayList<Integer>> path = new ArrayList<ArrayList<Integer>>();
		
		// Prevents the piece going to squares off the board
		if((y < 8 && y > -1) && (x < 8 && x > -1))
		{
			// Create an array to hold the coordinates for the movement
			ArrayList<Integer> moves = new ArrayList<Integer>();

			// Add the movement coordinates
			moves.add(y);
			moves.add(x);
			
			// Add the movement to the path 
			path.add(moves);
		}
		
		return path;
	}
	
	/**
	 * Creates a downwards path based on the current pieces location.
	 * 
	 * @return	Returns a path for an downwards direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathDown()
	{
		ArrayList<ArrayList<Integer>> pathDown = new ArrayList<ArrayList<Integer>>();
		
		// Create path to move rook downwards
		for(int i = x + 1; i < 8; i++)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();

			moves.add(y);
			moves.add(i);
			
			pathDown.add(moves);
		}
		
		return pathDown;
	}
	
	/**
	 * Creates a upwards path based on the current pieces location.
	 * 
	 * @return Returns a path for an upwards direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathUp()
	{
		// Create an ArrayList to hold each move in the upwards path. Each move will also contain the x and y location of the square.
		ArrayList<ArrayList<Integer>> pathUp = new ArrayList<ArrayList<Integer>>();
		
		// Get the current X position of the piece and calculate possible squares upwards
		for(int i = x - 1; i > -1; i--)
		{
			// Create a moves ArrayList which will hold the coordinates for the possible upwards squares generated by the for loop
			ArrayList<Integer> moves = new ArrayList<Integer>();

			// Add y and x coordinates to the ArrayList
			moves.add(y);
			moves.add(i);
			
			// Add each move to the upwards path
			pathUp.add(moves);
		}
		
		return pathUp;
	}
	
	/**
	 * Creates a left path based on the current pieces location.
	 * 
	 * @return Returns a path for an left direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathLeft()
	{
		// Create an ArrayList to hold each move in the left path. Each move will also contain the x and y location of the square.
		ArrayList<ArrayList<Integer>> pathLeft = new ArrayList<ArrayList<Integer>>();
		
		// Get the current Y position of the piece and calculate possible squares to the left
		for(int i = y - 1; i > -1; i--)
		{
			// Create a moves ArrayList which will hold the coordinates for the possible left squares generated by the for loop
			ArrayList<Integer> moves = new ArrayList<Integer>();

			// Add y and x coordinates to the ArrayList
			moves.add(i);
			moves.add(x);
			 
			// Add each move to the left path
			pathLeft.add(moves);
		}
		
		return pathLeft;
	}
	
	/**
	 * Creates a right path based on the current pieces location.
	 * 
	 * @return Returns a path for an right direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathRight()
	{
		ArrayList<ArrayList<Integer>> pathRight = new ArrayList<ArrayList<Integer>>();
		
		// Create path to move rook right
		for(int i = y + 1; i < 8; i++)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();

			moves.add(i);
			moves.add(x);
			
			pathRight.add(moves);
		}
		
		return pathRight;
	}
	
	/**
	 * Creates a bottom right diagonal path based on the current pieces location.
	 * 
	 * @return Returns a path for an bottom right diagonal direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathBottomRight()
	{
		ArrayList<ArrayList<Integer>> pathBottomRight = new ArrayList<ArrayList<Integer>>();
		
		for(int i = x + 1, j = y + 1; i < 8 && j < 8; i++, j++)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();

			moves.add(j);
			moves.add(i);
			pathBottomRight.add(moves);
		}
		
		return pathBottomRight;
	}
		
	/**
	 * Creates a top right diagonal path based on the current pieces location.
	 * 
	 * @return Returns a path for an top right diagonal direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathTopRight()
	{
		ArrayList<ArrayList<Integer>> pathTopRight = new ArrayList<ArrayList<Integer>>();
		
		for(int i = x - 1, j = y + 1; i > -1 && j < 8; i--, j++)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();
			
			moves.add(j);
			moves.add(i);
			pathTopRight.add(moves);
		}
		
		return pathTopRight;
	}
	
	/**
	 * Creates a bottom left diagonal path based on the current pieces location.
	 * 
	 * @return Returns a path for an bottom left diagonal direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathBottomLeft()
	{
		ArrayList<ArrayList<Integer>> pathBottomLeft = new ArrayList<ArrayList<Integer>>();
		
		for(int i = x + 1, j = y - 1; i < 8 && j > -1; i++, j--)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();
			
			moves.add(j);
			moves.add(i);
			pathBottomLeft.add(moves);
		}
		
		return pathBottomLeft;
	}
	
	/**
	 * Creates a top left diagonal path based on the current pieces location.
	 * 
	 * @return Returns a path for an top left diagonal direction of the piece
	 */
	public ArrayList<ArrayList<Integer>> createPathTopLeft()
	{
		ArrayList<ArrayList<Integer>> pathTopLeft = new ArrayList<ArrayList<Integer>>();
		
		for(int i = x - 1, j = y - 1; i > -1 && j > -1; i--, j--)
		{			
			ArrayList<Integer> moves = new ArrayList<Integer>();
			
			moves.add(j);
			moves.add(i);
			pathTopLeft.add(moves);
		}
		
		return pathTopLeft;
	}
	
	/**
	 * Generates the movements for each type of piece
	 * 
	 * @return	Returns all the paths the piece can take
	 */
	public abstract ArrayList<ArrayList<ArrayList<Integer>>> possibleMoves();
	
	/* ===================== */
	/* = Getters & Setters = */
	/* ===================== */
		
	/**
	 * Returns the pieces name
	 * 
	 * @return	The pieces name
	 */
	public String getName() 
	{
		return name;
	}

	/**
	 * Sets the piece name
	 * 
	 * @param name	New name for the piece 
	 */
	public void setName(String pName) 
	{
		name = pName;
	}

	/**
	 * Returns the pieces colour
	 * 
	 * @return	The pieces colour
	 */
	public String getColor() 
	{
		return color;
	}

	/**
	 * Sets the pieces colour
	 * 
	 * @param color	The new colour of the piece
	 */
	public void setColor(String pColor) 
	{
		color = pColor;
	}

	/**
	 * Returns the pieces value
	 * 
	 * @return	The value of the piece
	 */
	public int getValue() 
	{
		return value;
	}

	/**
	 * Sets the value of the piece
	 * 
	 * @param value	The new value of the piece
	 */
	public void setValue(int pValue) 
	{
		value = pValue;
	}

	/**
	 * Gets the pieces x coordinate
	 * 
	 * @return	The pieces x coordinate
	 */
	public int getX() 
	{
		return x;
	}

	/**
	 * Sets the x coordinate for the piece
	 * 
	 * @param x	The new x coordinate for the piece
	 */
	public void setX(int pX) 
	{
		x = pX;
	}

	/**
	 * Gets the pieces y coordinate
	 * 
	 * @return	The pieces y coordinate
	 */
	public int getY() 
	{
		return y;
	}
	
	/**
	 * Sets the y coordinate for the piece
	 * 
	 * @param y	The new y coordinate for the piece
	 */
	public void setY(int pY) 
	{
		y = pY;
	}

	/**
	 * Gets the pieces image file
	 * 
	 * @return	The location of the image for the piece. This is used for the icons on the squares to indicate to the user which piece is currently on the square
	 */
	public String getImage() 
	{
		return image;
	}

	/**
	 * Sets the pieces image file
	 * 
	 * @param image	The new image file. The new image file will be used to display on squares which piece currently occupies it.
	 */
	public void setImage(String pImage) 
	{
		image = pImage;
	}

	/**
	 * Checks if the piece is currently active
	 * 
	 * @return	Returns true if the piece is currently active, false if it is not
	 */
	public boolean isActive() 
	{
		return active;
	}

	/**
	 * Sets the piece activity
	 * 
	 * @param active	New piece activity state
	 */
	public void setActive(boolean pActive) 
	{
		active = pActive;
	}

	/**
	 * Checks if a piece has not moved before
	 * 
	 * @return	Returns true if the piece hasn't moved before, and false if it has
	 */
	public boolean isFirstMove() 
	{
		return firstMove;
	}

	/**
	 * Sets the pieces first move
	 * 
	 * @param firstMove	The new property for the first move attribute
	 */
	public void setFirstMove(boolean pFirstMove) 
	{
		firstMove = pFirstMove;
	}
}